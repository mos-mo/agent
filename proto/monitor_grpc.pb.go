// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc2
// source: proto/monitor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_StreamFrames_FullMethodName = "/monitor.AgentService/StreamFrames"
	AgentService_StreamEvents_FullMethodName = "/monitor.AgentService/StreamEvents"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ====== Agent → Server ======
type AgentServiceClient interface {
	// 화면 프레임 스트리밍
	StreamFrames(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FrameData, StreamAck], error)
	// 이벤트 스트리밍
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventData, StreamAck], error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) StreamFrames(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FrameData, StreamAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_StreamFrames_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FrameData, StreamAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamFramesClient = grpc.ClientStreamingClient[FrameData, StreamAck]

func (c *agentServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventData, StreamAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], AgentService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventData, StreamAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamEventsClient = grpc.ClientStreamingClient[EventData, StreamAck]

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// ====== Agent → Server ======
type AgentServiceServer interface {
	// 화면 프레임 스트리밍
	StreamFrames(grpc.ClientStreamingServer[FrameData, StreamAck]) error
	// 이벤트 스트리밍
	StreamEvents(grpc.ClientStreamingServer[EventData, StreamAck]) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) StreamFrames(grpc.ClientStreamingServer[FrameData, StreamAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrames not implemented")
}
func (UnimplementedAgentServiceServer) StreamEvents(grpc.ClientStreamingServer[EventData, StreamAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_StreamFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).StreamFrames(&grpc.GenericServerStream[FrameData, StreamAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamFramesServer = grpc.ClientStreamingServer[FrameData, StreamAck]

func _AgentService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).StreamEvents(&grpc.GenericServerStream[EventData, StreamAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamEventsServer = grpc.ClientStreamingServer[EventData, StreamAck]

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrames",
			Handler:       _AgentService_StreamFrames_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _AgentService_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/monitor.proto",
}

const (
	AdminService_SubscribeOverview_FullMethodName = "/monitor.AdminService/SubscribeOverview"
	AdminService_SubscribeDetail_FullMethodName   = "/monitor.AdminService/SubscribeDetail"
	AdminService_SubscribeEvents_FullMethodName   = "/monitor.AdminService/SubscribeEvents"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ====== Admin → Server ======
type AdminServiceClient interface {
	// 전체 Agent 목록과 미리보기 프레임 실시간 수신
	SubscribeOverview(ctx context.Context, in *AdminSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FrameData], error)
	// 특정 Agent의 상세 화면 실시간 수신
	SubscribeDetail(ctx context.Context, in *AgentDetailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FrameData], error)
	// 특정 Agent의 이벤트 로그 실시간 수신
	SubscribeEvents(ctx context.Context, in *AgentDetailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventData], error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) SubscribeOverview(ctx context.Context, in *AdminSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FrameData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_SubscribeOverview_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AdminSubscribeRequest, FrameData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeOverviewClient = grpc.ServerStreamingClient[FrameData]

func (c *adminServiceClient) SubscribeDetail(ctx context.Context, in *AgentDetailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FrameData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_SubscribeDetail_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentDetailRequest, FrameData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeDetailClient = grpc.ServerStreamingClient[FrameData]

func (c *adminServiceClient) SubscribeEvents(ctx context.Context, in *AgentDetailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[2], AdminService_SubscribeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentDetailRequest, EventData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeEventsClient = grpc.ServerStreamingClient[EventData]

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// ====== Admin → Server ======
type AdminServiceServer interface {
	// 전체 Agent 목록과 미리보기 프레임 실시간 수신
	SubscribeOverview(*AdminSubscribeRequest, grpc.ServerStreamingServer[FrameData]) error
	// 특정 Agent의 상세 화면 실시간 수신
	SubscribeDetail(*AgentDetailRequest, grpc.ServerStreamingServer[FrameData]) error
	// 특정 Agent의 이벤트 로그 실시간 수신
	SubscribeEvents(*AgentDetailRequest, grpc.ServerStreamingServer[EventData]) error
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) SubscribeOverview(*AdminSubscribeRequest, grpc.ServerStreamingServer[FrameData]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOverview not implemented")
}
func (UnimplementedAdminServiceServer) SubscribeDetail(*AgentDetailRequest, grpc.ServerStreamingServer[FrameData]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDetail not implemented")
}
func (UnimplementedAdminServiceServer) SubscribeEvents(*AgentDetailRequest, grpc.ServerStreamingServer[EventData]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_SubscribeOverview_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdminSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).SubscribeOverview(m, &grpc.GenericServerStream[AdminSubscribeRequest, FrameData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeOverviewServer = grpc.ServerStreamingServer[FrameData]

func _AdminService_SubscribeDetail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentDetailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).SubscribeDetail(m, &grpc.GenericServerStream[AgentDetailRequest, FrameData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeDetailServer = grpc.ServerStreamingServer[FrameData]

func _AdminService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentDetailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).SubscribeEvents(m, &grpc.GenericServerStream[AgentDetailRequest, EventData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_SubscribeEventsServer = grpc.ServerStreamingServer[EventData]

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOverview",
			Handler:       _AdminService_SubscribeOverview_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeDetail",
			Handler:       _AdminService_SubscribeDetail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeEvents",
			Handler:       _AdminService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monitor.proto",
}
